package com.bridgelabz.userregistration.controller;

import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.bridgelabz.userregistration.dto.UserDTO;
import com.bridgelabz.userregistration.model.UserModel;
import com.bridgelabz.userregistration.service.IUserService;
import com.bridgelabz.userregistration.utill.ResponseClass;

/**
 * Purpose:Creating APIS for user Controller
 * 
 * @author Manoj
 * @Param Http METHODS Version 1.0
 */
@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	IUserService iUserService;

	/**
	 * Purpose:Creating method to add user
	 * 
	 * @author Manoj
	 * @Param user dto
	 */
	@PostMapping("/createUser")
	public ResponseEntity<ResponseClass> createUser(@Valid @RequestBody UserDTO userDTO) {
		ResponseClass responseClass = iUserService.createUser(userDTO);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method to Update user
	 * 
	 * @author Manoj
	 * @Param id ,token ,name ,email
	 */
	@PutMapping("/updateUser")
	public ResponseEntity<ResponseClass> updateUser(@RequestHeader String token, @RequestParam String name,
			@RequestParam @NotBlank String email, @RequestParam @NotBlank String phoneNumber,
			@RequestParam @NotBlank String dateOfBirth, @RequestParam @NotBlank Boolean isActive) {
		ResponseClass responseClass = iUserService.updateUser(token, name, email, phoneNumber, dateOfBirth, isActive);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method to get List of user
	 * 
	 * @author Manoj
	 * @Param token
	 */
	@GetMapping("/userList")
	public ResponseEntity<List<?>> getList(@RequestHeader String token) {
		List<UserModel> responseClass = iUserService.getList(token);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method to Delete user
	 * 
	 * @author Manoj
	 * @Param token,id
	 */
	@DeleteMapping("/deleteUser/{userId}")
	public ResponseEntity<ResponseClass> deleteUser(@RequestHeader String token, @PathVariable Long userId) {
		ResponseClass responseClass = iUserService.deleteUser(token, userId);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method to retrieve user
	 * 
	 * @author Manoj
	 * @Param phone number
	 */
	@PostMapping("/retrieveUser")
	public ResponseEntity<ResponseClass> retrieveUser(@RequestHeader String token, @RequestParam Long userId) {
		ResponseClass responseClass = iUserService.retrieveUser(token, userId);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method to permanent Delete user
	 * 
	 * @author Manoj
	 * @Param phone number
	 */
	@DeleteMapping("/deleteUserPermanent")
	public ResponseEntity<ResponseClass> deleteUserPermanent(@RequestHeader String token, @RequestParam Long userId) {
		ResponseClass responseClass = iUserService.deleteUserPermanent(token, userId);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method Reset password of user
	 * 
	 * @author Manoj
	 * @Param email
	 */
	@PostMapping("/resetAdminPassword")
	public ResponseEntity<ResponseClass> resetPassword(@RequestParam String email) {
		ResponseClass responseClass = iUserService.resetPassword(email);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method change password of user
	 * 
	 * @author Manoj
	 * @Param token,newPassword
	 */
	@PutMapping("/changeAdminPassword")
	public ResponseEntity<ResponseClass> changePassword(@RequestHeader String token, @RequestParam String newPassword) {
		ResponseClass responseClass = iUserService.changePassword(token, newPassword);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}

	/**
	 * Purpose:Creating method Login to user using unique id called token
	 * 
	 * @author Manoj
	 * @Param email,password
	 */
	@PostMapping("/loginToken")
	public ResponseEntity<ResponseClass> login(@RequestParam String emailId, @RequestParam String password) {
		ResponseClass responseClass = iUserService.loginToken(emailId, password);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}
	
	/**
	 * Purpose:Creating method Reset password of user
	 * 
	 * @author Manoj
	 * @Param email
	 */
	@PostMapping("/activateUser")
	public ResponseEntity<ResponseClass> activateUser(@RequestHeader String token) {
		ResponseClass responseClass = iUserService.activateUser(token);
		return new ResponseEntity<>(responseClass, HttpStatus.OK);
	}
}
